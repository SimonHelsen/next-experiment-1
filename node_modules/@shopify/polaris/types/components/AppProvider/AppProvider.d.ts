import * as React from 'react';
import { Theme } from '../ThemeProvider';
import { LinkLikeComponent } from '../UnstyledLink';
import { TranslationDictionary } from './utilities';
import { Context } from './types';
export interface Props {
    /** A locale object or array of locale objects that overrides default translations */
    i18n?: TranslationDictionary | TranslationDictionary[];
    /** A custom component to use for all links used by Polaris components */
    linkComponent?: LinkLikeComponent;
    /** The API key for your application from the Partner dashboard */
    apiKey?: string;
    /**
     * The current shopâ€™s origin, provided in the session from the Shopify API (to be provided without the https://)
     * @default getShopOrigin()
     * @see {@link https://help.shopify.com/en/api/embedded-apps/app-bridge#set-up-your-app|Shopify App Bridge docs}
     **/
    shopOrigin?: string;
    /** Forces a redirect to the relative admin path when not rendered in an iframe */
    forceRedirect?: boolean;
    /** Custom logos and colors provided to select components */
    theme?: Theme;
}
export default class AppProvider extends React.Component<Props> {
    static childContextTypes: React.ValidationMap<any>;
    polarisContext: Context;
    private stickyManager;
    private scrollLockManager;
    private subscriptions;
    constructor(props: Props);
    componentDidMount(): void;
    componentWillReceiveProps({ i18n, linkComponent, apiKey, shopOrigin, forceRedirect, }: Props): void;
    getChildContext(): Context;
    render(): JSX.Element;
    subscribe(callback: () => void): void;
    unsubscribe(callback: () => void): void;
}
